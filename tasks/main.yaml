---

- name: Gitlab configuration
  ansible.builtin.import_tasks: gitlab.yaml
  when: role_git_conf.gitlab is defined
  tags:
    - gitlab


- name: Github configuration
  ansible.builtin.import_tasks: github.yaml
  when: role_git_conf.github is defined
  tags:
    - github


- name: Update Repository README.md
  ansible.builtin.import_tasks: readme.yaml
  tags:
    - readme

- name: Clean pipelines
  ansible.builtin.import_tasks: gitlab_clean_pipelines.yaml
  tags:
    - pipelines

- name: Update Git Sub-Modules
  ansible.builtin.import_tasks: submodule_update.yaml
  tags:
    - submodule

- name: Update gitlab group labels
  ansible.builtin.include_tasks: gitlab/labels.yaml
  vars:
    group_labels: "{{ task_item.labels }}"
    group_path: "{{ task_item.path }}"
    gitlab_api_token: "{{ role_git_conf.gitlab.api_token_owner }}"
  loop_control:
    loop_var: task_item
  when: task_item.labels | length | int > 0
  loop: "{{ role_git_conf.gitlab.groups | from_yaml }}"


- name: Update gitlab project labels
  ansible.builtin.include_tasks: gitlab/labels.yaml
  vars:
    project_labels: "{{ task_item.labels }}"
    project_path: "{{ task_item.group }}/{{ task_item.name | lower | replace(' ', '_') }}"
    gitlab_api_token: "{{ role_git_conf.gitlab.api_token_owner }}"
  loop_control:
    loop_var: task_item
  when: task_item.labels | length | int > 0
  loop: "{{ role_git_conf.gitlab.projects | from_yaml }}"


- block:
    # Minimum required variables for this automation are:
    #  - `gitlab_api_token `defaults to 'role_git_conf.gitlab.api_token' unless within gitlab CD/CI environment.
    #  - `project_path` must be specified within gitlab CD/CI environment


    - name: Create Merge Request(s) from git patches found gitlab issue comment(s)
      ansible.builtin.include_tasks:
        file: gitlab_apply_issue_patch.yaml
        apply:
          tags:
            - always
      #vars:
      #  gitlab_api_token: "{{ role_git_conf.gitlab.api_token }}"
      #  project_path: "nofusscomputing/projects/ansible/git_configuration"
      tags:
        - always


  when: "'gitlab_issue_patches' in ansible_run_tags"


- name: Create Artifact with contents of gitlab webhook
  ansible.builtin.set_stats:
    data:
      webhook: "{{ awx_webhook_payload }}"
    per_host: false
  tags:
    - never
    - gitlab_webhook
