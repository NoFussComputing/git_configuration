---

- name: Telemetry facts
  ansible.builtin.set_fact:
    # how long it takes for a human to delete a ci/cd job
    task_duration_human: 300
    task_start_epoch: "{{ ansible_date_time.epoch }}"


- name: Gitlab CI Detection
  ansible.builtin.set_fact:
    project_path: "{{ lookup('env', 'CI_PROJECT_PATH') }}"
    api_token:  "{{ lookup('env', 'GIT_COMMIT_TOKEN') }}"
    repo_root: "{{ lookup('env', 'CI_PROJECT_DIR') }}"
    gitlab_job_number: "{{ lookup('env', 'CI_JOB_ID') }}"
    gitlab_job_url: "{{ lookup('env', 'CI_JOB_URL') }}"
  when: lookup('env', 'CI') | default(false)


- name: Gitlab include repository config file
  ansible.builtin.include_vars: "{{ repo_root }}/.nfc_automation.yaml"
  when: lookup('env', 'CI') | default(false)


- name: Gitlab CI config Expansion
  ansible.builtin.set_fact:
    submodule_branch: "{{ role_git_conf.gitlab.submodule_branch | default(omit) }}"
    default_branch: "{{ role_git_conf.gitlab.default_branch | default(omit) }}"
    mr_labels: "{{ role_git_conf.gitlab.mr_labels | default(omit) }}"
    auto_merge: "{{ role_git_conf.gitlab.auto_merge | default(false) }}"
  when: lookup('env', 'CI') | default(false)


- name: required play variables
  ansible.builtin.set_fact:
    automation_branch: automated-tasks
    merge_request_id: 'not found'
    merge_request_existing: ''
    merge_request_fetch: ''
    merge_request_create: ''
    mr_title: "{{ 'chore(git): Automated update of git sub-modules' | urlencode }}"


- name: fetch current submodule names
  ansible.builtin.shell: >
    cd {{ repo_root }};
    for mod in $(git submodule | awk '{print $2}'); do echo $mod; done
  register: submodules
  failed_when: submodules.rc > 0 or submodules.stderr_lines|length > 0
  changed_when: "'never' == 'changes'"


- name: submodule facts cleanup
  ansible.builtin.set_fact:
    submodules: "{{ submodules.stdout_lines | from_yaml }}"


- name: Sanity check, ensure git remote automation is absent
  ansible.builtin.command:
    cmd: "git remote remove automation"
    chdir: "{{ repo_root }}"
  changed_when: "'never' == 'changes'"
  failed_when: "'never' == 'fails'"


- name: Add Remote with auth details
  ansible.builtin.command:
    cmd: "git remote add automation https://gitlab-ci-token:{{ api_token }}@gitlab.com/{{ project_path }}.git"
    chdir: "{{ repo_root }}"
  register: git_remote_add
  failed_when: git_remote_add.rc > 0
  changed_when: "'never' == 'changes'"
  no_log: true


- name: Sanity Check - Fetch all
  ansible.builtin.command:
    cmd: "git fetch --all"
    chdir: "{{ repo_root }}"
  changed_when: "'never' == 'changes'"
  failed_when: "'never' == 'fails'"


- name: check for existing automation branch
  ansible.builtin.shell: |
    cd "{{ repo_root }}";
    if [ "0$(git ls-remote automation {{ automation_branch }})" == "0" ]; then exit 0; else exit 1; fi
  args:
    executable: bash
  register: existing_branch
  failed_when: existing_branch.rc > 1
  changed_when: existing_branch.rc == 1



- name: Pull existing automation branch and switch
  ansible.builtin.shell: |
    cd "{{ repo_root }}";
    git fetch --all;
    git checkout --track automation/{{ automation_branch }};
    git switch {{ automation_branch }} --force;
    git reset --recurse-submodule --hard
    # git log -3;
  register: pull_branch
  when: existing_branch.rc == 1


- name: No Automation branch, checkout default branch
  ansible.builtin.command:
    cmd: "git switch automation/{{ default_branch }}"
    chdir: "{{ repo_root }}"
  changed_when: "'never' == 'changes'"
  failed_when: "'never' == 'fails'"
  when: existing_branch.rc == 0


- name: Generate Play Config
  ansible.builtin.shell: |
    echo $(echo `cat <<EOF
    {
      "gitmodules": [

        {% for git_sub_module in submodules %}

          {
            "name": "{{ git_sub_module }}",
            "url": "$(cd {{ repo_root }}/{{ git_sub_module }} && git remote get-url --all origin)",
            "branch": "{{ submodule_branch }}",
            "current_commit": "$(cd {{ repo_root }}/{{ git_sub_module }} && git reset --hard > /dev/null && git log -1 --format=format:'%H')",
            "remote_head": "$(cd {{ repo_root }}/{{ git_sub_module }} && git fetch --all > /dev/null && git log origin/{{ submodule_branch }} -1 --format=format:'%H')",
            "path": "{{ repo_root }}/{{ git_sub_module }}",
            "remote_name": "$(git remote)"
          },

        {% endfor %}

      ]

    }

    EOF`);
  register: playconfig
  changed_when: "'never' == 'changes'"


- name: submodule facts cleanup
  ansible.builtin.set_fact:
    playconfig: "{{ playconfig.stdout | from_yaml }}"


- name: Update set sub-module branch
  ansible.builtin.command:
    cmd: "git submodule set-branch --branch {{ item.branch }} {{ item.name }}"
    chdir: "{{ repo_root }}"
  register: update_submodule_branch
  with_items: "{{ playconfig.gitmodules }}"
  when: "item.current_commit != item.remote_head"
  failed_when: update_submodule_branch.rc != 0


- name: Update submodule
  ansible.builtin.command:
    cmd: "git submodule update --init --remote {{ item.name }}"
    chdir: "{{ repo_root }}"
  register: update_submodules
  with_items: "{{ playconfig.gitmodules }}"
  when: "item.current_commit != item.remote_head"
  failed_when: update_submodules.rc != 0


- name: Check for existing Merge Request
  ansible.builtin.uri:
    url: "https://gitlab.com/api/v4/projects/{{ project_path | replace('/', '%2F') }}/merge_requests?state=opened&source_branch={{ automation_branch }}&target_branch={{ default_branch }}"
    method: GET
    body_format: json
    return_content: true
    headers:
      PRIVATE-TOKEN: "{{ api_token }}"
  register: existing_merge_request
  failed_when: "'never' == 'fail'"
  no_log: true


- name: DEBUG - Existing Merge request return_content
  ansible.builtin.debug:
    msg: "{{ existing_merge_request.json[0] | from_yaml }}"
  when: existing_merge_request.json|default('')|length > 0


- name: Set Existing MR ID if exists
  ansible.builtin.set_fact:
    merge_request_id: "{{ existing_merge_request.json[0].iid | int | default('not found') }}"
    merge_request_note_url: "{{ existing_merge_request.json[0].web_url | default('not found') }}/notes"
    merge_request_existing: "{{ existing_merge_request.json[0] | default('') | from_yaml }}"
    merge_request: "{{ existing_merge_request.json[0] | default('') | from_yaml }}"
  when: existing_merge_request.json|default('')|length > 0


- name: Debug - list available branches
  ansible.builtin.command:
    cmd: "git branch -a"
    chdir: "{{ repo_root }}"
  when: update_submodules.changed|default(false) and existing_branch.rc == 0


- name: Create automation branch
  ansible.builtin.command:
    cmd: "git checkout -b {{ automation_branch }} automation/{{ default_branch }}"
    chdir: "{{ repo_root }}"
  register: new_branch
  when: update_submodules.changed|default(false) and existing_branch.rc == 0


- name: push automation branch
  ansible.builtin.shell: |
    cd "{{ repo_root }}";
    if [ $? == 0 ]; then 
      git push automation {{ automation_branch }}; export GIT_PUSH_RC=$?;
      if [ $GIT_PUSH_RC != 0 ]; then
        echo "error pushing to remote";
        exit $GIT_PUSH_RC;
      fi
    else 
      echo "Error adding remote";
      exit $?;
    fi
    
  args:
    executable: bash
  when: existing_branch.rc == 0 and new_branch.changed
  failed_when: push_automation_branch.rc != 0
  register: push_automation_branch


- name: Generate Merge Request description
  ansible.builtin.set_fact:
    mr_description: |
      ## :notepad_spiral: Summary

      This is Merge Request is part of an task that is automated with ansible. This Merge Request is being raised to update the git sub-modules

      
      {% if gitlab_job_number is defined %}
      ### :link: Links / References

      - Gitlab Job [{{ gitlab_job_number }}]({{ gitlab_job_url }})

      {% endif %}

      ### :robot: Automation data

      ``` json

      {{ playconfig | to_nice_json }}

      ```
      
      For more information please see the [documentation](https://gitlab.com/nofusscomputing/projects/ansible/git_configuration)

      /assign @nfc_bot

      /label {{ mr_labels }}
  when: merge_request_id|default('not found') == 'not found' and existing_merge_request.json|default('')|length == 0


- name: Create Merge Request
  ansible.builtin.uri:
    url: "https://gitlab.com/api/v4/projects/{{ project_path | replace('/', '%2F') }}/merge_requests?source_branch={{ automation_branch }}&target_branch={{ default_branch }}&&allow_collaboration=true&&title={{ mr_title }}&description={{ mr_description | urlencode }}"
    method: POST
    body_format: json
    status_code: [200,201]
    return_content: true
    headers:
      PRIVATE-TOKEN: "{{ api_token }}"
  register: new_merge_request
  when: >
    merge_request_id|default('not found') == 'not found' and
    existing_merge_request.json|default('')|length == 0 and 
    mr_description is defined and
    not push_automation_branch.skipped|default(false)|bool
  changed_when: new_merge_request.json != ''
  no_log: true


- name: DEBUG - New Merge request return_content
  ansible.builtin.debug:
    msg: "{{ new_merge_request.json | from_yaml }}"
  when: new_merge_request.json|default('')|length > 0


- name: Set Merge Request ID from newly created MR
  ansible.builtin.set_fact:
    merge_request_id: "{{ new_merge_request.json.iid | int | default('not found') }}"
    merge_request_note_url: "{{ new_merge_request.json.web_url | default('not found') }}/notes"
    merge_request_create: "{{ new_merge_request.json | default('') | from_yaml }}"
    merge_request: "{{ new_merge_request.json | default('') | from_yaml }}"
  when: new_merge_request.json|default('')|length > 0


- name: Sanity Check - Must Have Merge Request ID
  ansible.builtin.shell: \
    cd "{{ repo_root }}";
    if [ '0{{ merge_request_id }}' != '0not found' ]; then exit 0; else echo 'No Merge Request ID, job must fail'; exit 1; fi
  args:
    executable: bash
  register: mr_id_sanity_check
  when: not update_submodules.changed|default(false) and not update_submodules.skipped|default(false)
  failed_when: "mr_id_sanity_check.rc > 0"
  changed_when: "'never' == 'changes'"


- name: Switch to Automation Branch
  ansible.builtin.command:
    cmd: "git switch {{ automation_branch }}"
    chdir: "{{ repo_root }}"
  when: "existing_branch.rc == 1"
  register: switch_to_automation_branch
  failed_when: "switch_to_automation_branch.rc > 0"


- name: Stage Changes for commit
  ansible.builtin.command:
    cmd: "git add {{ item.item.name }}"
    chdir: "{{ repo_root }}"
  with_items: "{{ update_submodules.results }}"
  when: item.changed
  register: added_changes


- name: Commit the changes
  ansible.builtin.shell: |
    cd "{{ repo_root }}";
    export GIT_AUTHOR_NAME=nfc_bot;
    export GIT_AUTHOR_EMAIL=helpdesk@nofusscomputing.com;
    export GIT_COMMITTER_NAME=nfc_bot;
    export GIT_COMMITTER_EMAIL=helpdesk@nofusscomputing.com;
    git commit -m "$(echo 'chore(git): updated submodule {{ item.item.name }}\n\nAutomation Data:\n{{ item.item | to_nice_json }}\n\nChanges: {{ item.stdout }}\n\nMR !{{ merge_request_id }}')";
  with_items: "{{ update_submodules.results }}"
  when: item.changed
  register: changes_commited
  failed_when: changes_commited.rc != 0


- name: Push Changes to remote
  ansible.builtin.command:
    cmd: "git push automation {{ automation_branch }}"
    chdir: "{{ repo_root }}"
  register: push_branch_changes
  when: update_submodules.changed|default(false)


- name: Pause for 20 seconds for gitlab to catchup
  ansible.builtin.pause:
    seconds: 20


- name: Fetch Merge Request
  ansible.builtin.uri:
    url: "https://gitlab.com/api/v4/projects/{{ project_path | replace('/', '%2F') }}/merge_requests/{{ merge_request_id }}"
    method: GET
    body_format: json
    status_code: [200, 201]
    return_content: true
    headers:
      PRIVATE-TOKEN: "{{ api_token }}"
  when: merge_request_id|default('not found') != 'not found'
  register: merge_request
  no_log: true


- name: Fetch Merge Request Approvals
  ansible.builtin.uri:
    url: "https://gitlab.com/api/v4/projects/{{ project_path | replace('/', '%2F') }}/merge_requests/{{ merge_request_id }}/approvals"
    method: GET
    body_format: json
    status_code: [200, 201]
    return_content: true
    headers:
      PRIVATE-TOKEN: "{{ api_token }}"
  when: merge_request_id|default('not found') != 'not found'
  register: merge_request_approvals
  no_log: true


- name: DEBUG - Merge request and Approvals
  ansible.builtin.debug:
    msg: 
      - "{{ merge_request.json | default('') | from_yaml }}"
      - "{{ merge_request_approvals.json | default('') | from_yaml }}"


- name: Variable Cleanup 'merge_request_approvals'
  ansible.builtin.set_fact:
    merge_request_approvals_fetch: "{{ merge_request_approvals.json }}"
    merge_request_approvals: "{{ merge_request_approvals.json }}"
    merge_request_fetch: "{{ merge_request.json | default('') | from_yaml }}"
    merge_request: "{{ merge_request.json | default('') | from_yaml }}"
  when: merge_request_approvals.json|default('')|length > 0


- name: Set Merge approval facts
  ansible.builtin.set_fact:
    merge_request_needs_approval: "{{ merge_request_approvals.approvals_required | default(0) | int }}"
    merge_request_user_can_approve: "{% for approval_user in merge_request_approvals.suggested_approvers %}{% if approval_user.username == 'nfc_bot' %}true{% endif %}{% endfor%}"
    merge_request_approved: "{{ merge_request_approvals.approved | bool }}"
    merge_request_approval_require_password: "{{ merge_request_approvals.require_password_to_approve | bool }}"


- name: Update Merge approval facts
  ansible.builtin.set_fact:
    merge_request_user_can_approve: "{{ merge_request_user_can_approve | default(false) | bool }}"


- name: Approve Merge Request
  ansible.builtin.uri:
    url: "https://gitlab.com/api/v4/projects/{{ project_path | replace('/', '%2F') }}/merge_requests/{{ merge_request_id }}/approve"
    method: POST
    body_format: json
    return_content: true
    headers:
      PRIVATE-TOKEN: "{{ api_token }}"
  when: >
    merge_request_id|default('not found') != 'not found' and
    merge_request_needs_approval|int > 0 and
    merge_request_user_can_approve|bool and
    not merge_request_approval_require_password|bool and
    not merge_request_approved|bool
  register: merge_request_approve
  failed_when: "'never' == 'fails'"
  no_log: true


- name: Variable Cleanup 'merge_request_approvals'
  ansible.builtin.set_fact:
    merge_request_approvals_approve: "{{ merge_request_approve.json | default('') | from_yaml }}"
    merge_request_approvals: "{{ merge_request_approve.json | default('') | from_yaml }}"
  when: merge_request_approve.json|default('')|length > 0


- name: DEBUG - Merge request Approvals post approval
  ansible.builtin.debug:
    msg: 
      - "{{ merge_request_approvals | default('') | from_yaml }}"


- name: Approval fact - Addendum to MR Comment
  ansible.builtin.set_fact:
    merge_request_approval_comment: |
      {% raw%}
      {% if merge_request_needs_approval|default(0)|int > 0 %}This Merge request requires approval from {{ merge_request_needs_approval | int }} approver(s)
      {% if merge_request_approved|bool %}. However this MR is already approved. :white_check_mark:{% endif%}
      {% if not merge_request_approved|bool %} {% if merge_request_user_can_approve|bool %}{% if not merge_request_approval_require_password|bool%}, to which I have the required permissions to do so. :white_check_mark:{% else %}to which I have the required permissions to do so, however don't have any thumbs to enter a password as is required for approving a Merge request. :red_circle:{% endif %}{% else %}to which I don't have the required permissions to do so. :red_circle:

      :construction: /cc {% for approval_user in merge_request_approvals.approvers %}@{{approval_user.user.username}}  {% endfor %}, Please review and approve.{% endif %}{% endif %}
      {% else %}This Merge request does not require approval. :white_check_mark:{% endif%}
      {% endraw%}


- name: DEBUG - Merge request approvals addendum to comment
  ansible.builtin.debug:
    msg: 
      - "{{ merge_request_approval_comment }}"


- name: Telemetry fact - finish time
  ansible.builtin.set_fact:
    task_finish_epoch: "{{ now().strftime('%s') }}"


- name: Telemetry fact - task duration
  ansible.builtin.set_fact:
    task_duration_ansible: "{{ task_finish_epoch|int - task_start_epoch|int }}"


- name: Generate Merge Request comment
  ansible.builtin.set_fact:
    mr_comment: |
      {% raw %}This automated job has auto_merge={{ auto_merge | string }}, As such this merge request {% if auto_merge %}will be merged. :white_check_mark:{% else%}won't be merged as part of this automation. :no_entry:{% endif %}


      {% if gitlab_job_number is defined %}- :link: Gitlab Job [{{ gitlab_job_number }}]({{ gitlab_job_url }}){% endif %}


      <details><summary>Automation Data:</summary>

      ```json
      
      {{ playconfig | to_nice_json }}
      
      ```

      </details>

      {{ merge_request_approval_comment }}
      
      /spend {{ task_duration_ansible }}s
      {% endraw %}
  when: merge_request_id|default('not found') != 'not found' and push_branch_changes.changed|default(false)


- name: Generate Merge Request comment (no changes)
  ansible.builtin.set_fact:
    mr_comment: |
      {% raw %}This automated job has auto_merge={{ auto_merge | string }}, As such this merge request {% if auto_merge %}will be merged. :white_check_mark:{% else%}won't be merged as part of this automation. :red_circle:{% endif %}


      :no_entry: There were **no changes** to commit.


      {% if gitlab_job_number is defined %}- :link: Gitlab Job [{{ gitlab_job_number }}]({{ gitlab_job_url }}){% endif %}

      {{ merge_request_approval_comment }}

      /spend {{ task_duration_ansible }}s
      {% endraw %}
  when: merge_request_id|default('not found') != 'not found' and not push_branch_changes.changed|default(false)



- name: DEBUG - Show Merge Request comment
  ansible.builtin.debug:
    msg: "{{ mr_comment }}"


- name: Comment on Merge Request
  ansible.builtin.uri:
    url: "https://gitlab.com/api/v4/projects/{{ project_path | replace('/', '%2F') }}/merge_requests/{{ merge_request_id }}/notes"
    method: POST
    body_format: json
    status_code: [200, 201]
    return_content: true
    headers:
      PRIVATE-TOKEN: "{{ api_token }}"
    body:
      body: "{{ mr_comment }}"
  when: merge_request_id|default('not found') != 'not found'
  register: merge_request_comment
  no_log: true


- name: DEBUG - Comment on Merge request return
  ansible.builtin.debug:
    msg: "{{ merge_request_comment.json | from_yaml }}"
  when: merge_request_comment.json|default('')|length > 0


- name: Merge the Merge Request
  ansible.builtin.uri:
    url: "https://gitlab.com/api/v4/projects/{{ project_path | replace('/', '%2F') }}/merge_requests/{{ merge_request_id }}/merge?merge_when_pipeline_succeeds=true&should_remove_source_branch=true&squash=false"
    method: PUT
    body_format: json
    status_code: [200, 201, 401, 405, 409, 422]
    return_content: true
    headers:
      PRIVATE-TOKEN: "{{ api_token }}"
  when: merge_request_id|default('not found') != 'not found' and auto_merge
  register: merge_the_merge_request
  no_log: true


- name: generate comment for unable to merge
  ansible.builtin.set_fact:
    merge_fail_comment: |
      {% raw %}
      I'm unabe to merge!!
      
      When I tried '{{ merge_the_merge_request.json.message }}' was returned

      <details>
      <summary>Debug Information</summary>

      Existing MR
      ```json
      {{ merge_request_existing | to_nice_json }}
      ```

      Create Merge Request
      ```json
      {{ merge_request_create | to_nice_json }}
      ```
      - *push changes if any*
      - *Pause for 20 Seconds*

      Fetch merge request
      ```json
      {{ merge_request_fetch | to_nice_json }}
      ```

      Fetch Approvals
      ```json
      {{ merge_request_approvals_fetch | to_nice_json }}
      ```

      Approve MR
      ```json
      {{ merge_request_approvals_approve | to_nice_json }}
      ```

      sub module details:
      ```json
      {{ playconfig | to_nice_json }}

      ```

      </details>
      
      /spend 10s
      {% endraw %}


- name: Comment on Merge Request
  ansible.builtin.uri:
    url: "https://gitlab.com/api/v4/projects/{{ project_path | replace('/', '%2F') }}/merge_requests/{{ merge_request_id }}/notes"
    method: POST
    body_format: json
    status_code: [200, 201]
    return_content: true
    headers:
      PRIVATE-TOKEN: "{{ api_token }}"
    body:
      body: "{{ merge_fail_comment }}"
  when: >
    merge_request_id|default('not found') != 'not found' and auto_merge|bool and 
    merge_the_merge_request.status|int > 400
  register: merge_request_comment
  no_log: true


- ansible.builtin.debug:
    msg:
      - submodules: "{{ submodules }}"
      - playconfig: "{{ playconfig }}"